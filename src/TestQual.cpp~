#include "./src/CQual.h"


int main (int argc, char *argv[]){
	CQual *cqual;
	int param = 0;
	cds_word sample_rate = 0;
	cds_word qualmode = 0;

	if(argc ==1){
		cout << "Use: ./Test <arch> <opt>" << endl;
		cout << "opt: " << endl;
		cout << "-q mode: How the Quality calues are stored. mode=0 gzip, mode=1 pblock, mode=2 rblock, mode=3 bins, mode=4 no store. Default: mode 0" << endl;
		cout << "-s sample:  size of the sample rate that will be use. Default: no sample" << endl;
		cout << "-l lossy: lossy parameter use to compress the quality score depending on the mode use. Default: 0" << endl; 
		return 0;
	}

	string filename = argv[1];

	int c;
	while((c = getopt (argc, argv, "q:bl:s:")) != -1){
		switch (c){
			case 'q':	qualmode = atoi(optarg); 	break;
			case 'b':	break;
			case 's':	sample_rate = atoi(optarg);	break;
			case 'l': param = atoi(optarg); break;
			case '?': if(optopt == 's') fprintf (stderr, "Option -%c requires an argument.\n", optopt);
									else if(optopt == 'q') fprintf (stderr, "Option -%c requires an argument.\n", optopt);
									else if(optopt == 'l') fprintf (stderr, "Option -%c requires an argument.\n", optopt);
									else if(isprint (optopt)) fprintf (stderr, "Unknown option `-%c'.\n", optopt);
				        else fprintf(stderr,"Unknown option character `\\x%x'.\n",	optopt);
				        return 1;
			default:	abort ();
		}
	}

	/*get the Quality fields*/
	csam = new CSAM(filename, qualmode, param, sample_rate);
  cout << "Size in MB: " <<  ((csam->GetSize()*1.0)/1048576) << endl;

	ofstream fileCSAM;
	string file = "fileCSAM.tmp";
	fileCSAM.open(file.c_str());
//	cout << "Saving" << endl;
	csam->Save(fileCSAM);
	fileCSAM.close();
	
	delete csam;
	return 0;
}

